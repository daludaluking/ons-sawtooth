syntax = "proto3";
option go_package = "ons_pb2";

message NestedFields {
    map<string, string> fields = 1;
}

message ServiceTypeFields {
    map<string, string> fields = 1;
    map<string, NestedFields> nested_fields = 2;
}

message ServiceType {
    //service_type_address는 transaction process 내부적으로 생성된다.
    //client에서 저장한 service_type_address는 무시된다.
    string address = 1;
    map<string, ServiceTypeFields> contents = 2;
    //service type을 등록하는 address. (service type 제공자의 public key)
    //client에서 저장한 public key는 무시되고 transaction을 전송할 때 사용된
    //public key를 사용한다.
    string provider = 3;
}

message Record {
    //uint32 order;
    //uint32 pref;
    //flags will be rune type in golang.
    int32 flags = 1;
    string service = 2; //url.... is it needed??
    string regexp = 3;
    //string replacement;
    //extended properties
    enum RecordState {
        RECORD_INACTIVE = 0;
        RECORD_ACTIVE = 1;
    }
    RecordState state = 4; //0 : inactive, 1 : active

    //record를 등록한 address. (service 제공자) 
    string provider = 5;
    //TO-DO : service type과 차후에 추가한다.
    //ServiceType serviceType;
    //FlexibleServiceType flexibleServiceType;
}

message GS1CodeData {
    //unique gs1 code string
    string gs1_code = 1;
 
    //unique onwer public key
    string owner_id = 2;

    //records will be slice. 
    repeated Record records = 3;

    enum GS1CodeState {
        GS1CODE_NONE = 0;
        GS1CODE_INACTIVE = 1;
        GS1CODE_ACTIVE = 2;
    }
    //0: not belong to anyone, 1 : inactive state, 2: active state
    GS1CodeState state = 4;
}

message SendONSTransactionPayload {
    message RegisterGS1CodeTransactionData {
        string gs1_code = 1;
    }

    message DeregisterGS1CodeTransactionData {
        string gs1_code = 1;
    }

    message RecordTranactionData {
        int32 flags = 1;
        string service = 2;
        string regexp = 3;
    }

    message AddRecordTransactionData {
        string gs1_code = 1;
        RecordTranactionData record  =2;
    }

    message RemoveRecordTransactionData {
        string gs1_code = 1;
        uint32 index = 2;
    }

    message RegisterServiceTypeTransactionData {
        ServiceType service_type = 1;
    }

    message DeregisterServiceTypeTransactionData {
        string address = 1;
    }

    enum ONSTransactionType {
        REGISTER_GS1CODE = 0;
        DEREGISTER_GS1CODE = 1;
        ADD_RECORD = 2;
        REMOVE_RECORD = 3;
        REGISTER_SERVICETYPE = 4;
        DEREGISTER_SERVICETYPE = 5;
    }

    ONSTransactionType transaction_type = 1;
    RegisterGS1CodeTransactionData register_gs1_code = 2;
    DeregisterGS1CodeTransactionData deregister_gs1_code = 3;
    AddRecordTransactionData add_record = 4;
    RemoveRecordTransactionData remove_record = 5;
    RegisterServiceTypeTransactionData register_service_type = 6;
    DeregisterServiceTypeTransactionData deregister_service_type = 7;
}