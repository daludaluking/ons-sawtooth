syntax = "proto3";
option go_package = "ons_pb2";

message ONSGS1CodeManager {
    //ONS의 GS1Code를 관리할 수 있는 권한을 가진 manager 정보.
    string gs1_code = 1;
    string address = 2;
}

message ONSManager {
    //Manager 모든 권한을 가진 address
    repeated ONSGS1CodeManager su_addresses = 1;
    repeated ONSGS1CodeManager manager_addresses = 2;
}

message ServiceType {
    message ServiceTypeField {
        string key = 1;
        string value =2;
    }
    //service_type_address는 transaction process 내부적으로 생성된다.
    //client에서 저장한 service_type_address는 무시된다.
    string address = 1;
    /*
        fields에는 일반적으로 "string(key) : string(value)"의 key value를 저장한다.
        만약, string(key) : json (value)을 저장이 필요한 경우
        types에 key_name(fields의 key) : type name(fields의 value, 예를 들어 "json")으로
        types map에 저장한다.
    */
    repeated ServiceTypeField fields = 2;
    repeated ServiceTypeField types = 3;
    //service type을 등록하는 address. (service type 제공자의 public key)
    //client에서 저장한 public key는 무시되고 transaction을 전송할 때 사용된
    //public key를 사용한다.
    string provider = 4;
}

message Record {
    //uint32 order;
    //uint32 pref;
    //flags will be rune type in golang.
    int32 flags = 1;
    string service = 2; //url.... is it needed??
    string regexp = 3;
    //string replacement;
    //extended properties
    enum RecordState {
        RECORD_INACTIVE = 0;
        RECORD_ACTIVE = 1;
    }
    RecordState state = 4; //0 : inactive, 1 : active

    //record를 등록한 address. (service 제공자)
    string provider = 5;
    //TO-DO : service type과 차후에 추가한다.
    //ServiceType serviceType;
    //FlexibleServiceType flexibleServiceType;
}

message GS1CodeData {
    //unique gs1 code string
    string gs1_code = 1;

    //unique onwer public key
    string owner_id = 2;

    //records will be slice.
    repeated Record records = 3;

    enum GS1CodeState {
        GS1CODE_NONE = 0;
        GS1CODE_INACTIVE = 1;
        GS1CODE_ACTIVE = 2;
    }
    //0: not belong to anyone, 1 : inactive state, 2: active state
    GS1CodeState state = 4;
}

message SendONSTransactionPayload {
    message RegisterGS1CodeTransactionData {
        string gs1_code = 1;
        //GS1 Code의 소유자 address.
        string owner_id = 2;
    }

    message DeregisterGS1CodeTransactionData {
        string gs1_code = 1;
    }

    message RecordTranactionData {
        int32 flags = 1;
        string service = 2;
        string regexp = 3;
    }

    message AddRecordTransactionData {
        string gs1_code = 1;
        RecordTranactionData record  =2;
    }

    message RemoveRecordTransactionData {
        string gs1_code = 1;
        uint32 index = 2;
    }

    message RegisterServiceTypeTransactionData {
        string address = 1;
        ServiceType service_type = 2;
    }

    message DeregisterServiceTypeTransactionData {
        string address = 1;
    }

    message ChangeGS1CodeStateTransactionData {
        string gs1_code = 1;
        GS1CodeData.GS1CodeState state = 2;
    }

    message ChangeRecordStateTransactionData {
        string gs1_code = 1;
        //record index
        uint32 index = 2;
        Record.RecordState state = 3;
    }

    message AddManagerTransactionData {
        string gs1_code = 1;
        string address = 2;
    }

    message RemoveManagerTransactionData {
        string gs1_code = 1;
    }

    message AddSUManagerTransactionData {
        string address = 1;
    }

    message RemoveSUManagerTransactionData {
        string address = 2;
    }

    enum ONSTransactionType {
        REGISTER_GS1CODE = 0;
        DEREGISTER_GS1CODE = 1;
        ADD_RECORD = 2;
        REMOVE_RECORD = 3;
        REGISTER_SERVICETYPE = 4;
        DEREGISTER_SERVICETYPE = 5;
        CHANGE_GS1CODE_STATE = 6;
        CHANGE_RECORD_STATE = 7;
        ADD_MANAGER = 8;
        REMOVE_MANAGER = 9;
        ADD_SUMANAGER = 10;
        REMOVE_SUMANAGER = 11;
    }

    ONSTransactionType transaction_type = 1;
    RegisterGS1CodeTransactionData register_gs1_code = 2;
    DeregisterGS1CodeTransactionData deregister_gs1_code = 3;
    AddRecordTransactionData add_record = 4;
    RemoveRecordTransactionData remove_record = 5;
    RegisterServiceTypeTransactionData register_service_type = 6;
    DeregisterServiceTypeTransactionData deregister_service_type = 7;
    ChangeGS1CodeStateTransactionData change_gs1_code_state = 8;
    ChangeRecordStateTransactionData change_record_state = 9;
    AddManagerTransactionData add_manager = 10;
    RemoveManagerTransactionData remove_manager = 11;
    AddSUManagerTransactionData add_sumanager = 12;
    RemoveSUManagerTransactionData remove_sumanager = 13;
}